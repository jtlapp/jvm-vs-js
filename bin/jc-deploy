# Deploys the chart of the provided name and its associated artifacts.

CHARTS_DIR=helm/just-charts
CHART_NAME=$1
TIMEOUT=30s

## Library

push_image() {
    local image=$1
    docker push $DOCKER_IMAGE_PREFIX/$image
}

deploy_local_chart() {
    local chart_name=$1
    helm install $chart_name $CHARTS_DIR/$chart_name/ -f $CHARTS_DIR/values.yaml -f $CHARTS_DIR/values-secret.yaml --timeout $TIMEOUT
}

deploy_remote_chart() {
    local release=$1
    local chart_ref=$2
    helm install $release $chart_ref -f $CHARTS_DIR/values-$release.yaml --timeout $TIMEOUT
}

create_configmap_from() {
    local chart_subdir=$1
    local configmap_name=$2
    local file_ext=$3
    kubectl create configmap $configmap_name --from-file=$CHARTS_DIR/$chart_subdir/$configmap_name$file_ext
}

## Deployment

if [ "$CHART_NAME" == "client" ]; then

    push_image "bench"
    deploy_local_chart "client"

    deploy_remote_chart "prometheus" "prometheus-community/prometheus"
    create_configmap_from "client/dashboards" "node-metrics-dashboard" ".json"
    deploy_remote_chart "grafana" "grafana/grafana"

    echo "Waiting for pods to start..."
    sleep 4

    NODE_IP=$(kubectl get nodes -o jsonpath="{.items[0].status.addresses[?(@.type=='ExternalIP')].address}")
    NODE_PORT=$(kubectl get -o jsonpath="{.spec.ports[0].nodePort}" services grafana)
    PASSWORD=$(kubectl get secret --namespace default grafana -o jsonpath="{.data.admin-password}" | base64 --decode)

    echo
    echo "Grafana URL: http://$NODE_IP:$NODE_PORT"
    echo "  Username: admin"
    echo "  Password: $PASSWORD"
    echo

else

    if [[ "$CHART_NAME" =~ "spring-jdbc" ]]; then
        push_image "spring-jdbc-app"
    elif [ "$CHART_NAME" != "backend-database" ]; then
        push_image "$CHART_NAME"
    fi

    deploy_local_chart "$CHART_NAME"

fi
